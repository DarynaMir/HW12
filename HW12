import pickle
from collections import UserDict
from datetime import datetime

class Field:
    def __init__(self, val):
        self.__value = None
        self.value = val
    
    @property
    def value(self):
        return self.__value

    @value.setter
    def value(self, val):
        self.__value = val

class Name(Field):
    pass

class Birthday(Field):
    @Field.value.setter
    def value(self, val: str):
        try:
            self._value = datetime.strptime(val, '%Y-%m-%d').date()
        except ValueError:
            raise ValueError(f"Invalid date format: {val}. Please use the format 'YYYY-MM-DD'.")

class Phone(Field):
    def __init__(self, val):
        if not isinstance(val, str) or not val.isdigit() or len(val) != 10:
            raise ValueError("Invalid phone number")
        super().__init__(val)

    @Field.value.setter
    def value(self, val):
        if not isinstance(val, str) or not val.isdigit() or len(val) != 10:
            raise ValueError("Invalid phone number")
        super(Phone, Phone).value.__set__(self, val)

class Record:
    def __init__(self, name, *phones, birthday=None):
        self.name = Name(name)
        self.phones = [Phone(phone) for phone in phones]
        self.birthday = Birthday(birthday) if birthday else None

    def add_phone(self, phone):
        self.phones.append(Phone(phone))

    def remove_phone(self, phone_to_remove):
        for phone in self.phones:
            if phone.value == phone_to_remove:
                self.phones.remove(phone)
                break

    def edit_phone(self, old_phone, new_phone):
        for phone in self.phones:
            if phone.value == old_phone:
                phone.value = new_phone
                return
        raise ValueError(f"Phone {old_phone} not found")

    def find_phone(self, phone_to_find):
        for phone in self.phones:
            if phone.value == phone_to_find:
                return phone
        return None

    def days_to_birthday(self):
        if self.birthday and self.birthday.value:
            today = datetime.today()
            next_birthday = datetime(today.year, self.birthday.value.month, self.birthday.value.day)
            if today > next_birthday:
                next_birthday = datetime(today.year + 1, self.birthday.value.month, self.birthday.value.day)
            return (next_birthday - today).days
        return None

    def __str__(self):
        birthday_str = (
            self.birthday.value.strftime('%Y-%m-%d')
            if self.birthday and self.birthday.value is not None
            else 'N/A'
        )
        return f"Contact name: {self.name.value}, phones: {'; '.join(str(phone.value) for phone in self.phones)}, birthday: {birthday_str}"


class AddressBook(UserDict):
    def __init__(self, filename):
        super().__init__()
        self.filename = filename

    def add_record(self, record):
        self.data[record.name.value] = record
        self.save_to_disk()

    def find(self, name):
        return self.data.get(name)

    def delete(self, name):
        if name in self.data:
            del self.data[name]
            self.save_to_disk()

    def iterator(self, item_number):
        counter = 0
        result = ''
        for item, record in self.data.items():
            result += f'{item}: {record}\n'
            counter += 1
            if counter >= item_number:
                yield result
                counter = 0
                result = ''

    def save_to_disk(self):
        with open(self.filename, 'wb') as file:
            pickle.dump(self.data, file)

    def load_from_disk(self):
        try:
            with open(self.filename, 'rb') as file:
                self.data = pickle.load(file)
        except FileNotFoundError:
            pass  # Handle the case when the file doesn't exist

    def search(self, query):
        results = {}
        for name, record in self.data.items():
            if query in name or any(query in phone.value for phone in record.phones):
                results[name] = record
        return results

# Приклад використання з початковим списком контактів:
contacts = [
    Record("John Doe", "0980597077"),
    Record("Jane Smith", "1234567890", birthday="1985-05-12"),
    Record("Bob Johnson", birthday="1995-08-22"),
]

address_book = AddressBook("address_book.dat")
address_book.load_from_disk()

# Додавання контактів до адресної книги
for contact in contacts:
    address_book.add_record(contact)

# Введення запиту користувачем
search_query = input("Введіть запит для пошуку: ")

# Пошук та виведення результатів
search_results = address_book.search(search_query)

print("Search Results:")
for name, record in search_results.items():
    phones = ', '.join(str(phone.value) for phone in record.phones)
    if record.birthday and record.birthday.value is not None:
        birthday = record.birthday.value.strftime('%Y-%m-%d')
    else:
        birthday = 'N/A'
    print(f"{name}: Phones: {phones}, Birthday: {birthday}")